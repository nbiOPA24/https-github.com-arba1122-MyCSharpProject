//biblotek
using System;
using System.Numerics;
using System.Text;
using System.Threading;
using System.Threading.Tasks;


//klassen f√∂r sj√§lva spelet
public class JeopardyGame
{
    static int cat1_100 = 100, cat1_200 = 200, cat1_300 = 300, cat1_400 = 400, cat1_500 = 500;
    static int cat2_100 = 100, cat2_200 = 200, cat2_300 = 300, cat2_400 = 400, cat2_500 = 500;
    static int cat3_100 = 100, cat3_200 = 200, cat3_300 = 300, cat3_400 = 400, cat3_500 = 500;
    static int cat4_100 = 100, cat4_200 = 200, cat4_300 = 300, cat4_400 = 400, cat4_500 = 500;

    static SoundManager soundManager = new SoundManager();
     


     // startar spelt
    public void StartGame()
    {
        Console.WriteLine("*      V√ÑLKOMMEN TILL JEOPARDY!     *");
        Console.WriteLine("**************************************");
        Console.WriteLine("   Testa era kunskaper och ha kul!    ");
        Console.WriteLine("**********************************\n");

        Console.WriteLine("Tryck alltid p√• Enter f√∂r att g√• vidare i spelet eller Q f√∂r att avbryta.");
        Console.WriteLine();

        // Spelare 1
        Console.WriteLine("Spelare 1, var god skriv in ditt namn:");
        string inputName1 = Console.ReadLine();
        Player player1 = new Player(string.IsNullOrWhiteSpace(inputName1) ? "Anonym Spelare" : inputName1);

        // Spelare 2
        Console.WriteLine("Spelare 2, var god skriv in ditt namn:");
        string inputName2 = Console.ReadLine();
        Player player2 = new Player(string.IsNullOrWhiteSpace(inputName2) ? "Anonym Spelare" : inputName2);

        Console.Clear();

        // Presentera Spelare 1
        Console.Clear();
        PresentPlayer(player1.Name);
        Console.ReadKey();

        // Rensa sk√§rmen och presentera Spelare 2
        Console.Clear();
        PresentPlayer(player2.Name);
        Console.ReadKey();

        // Visa regler och starta spelet
        Console.Clear();
        PresentGameRules();
        PlayGame(player1, player2);
    }

    static void PresentPlayer(string name)
    {
        if (name.ToLower().Contains("krister"))
        {
            Console.WriteLine($"H√§r har vi {name} ‚Äì en g√∂teborgare som f√∂rvandlat sn√∂ till hav och fj√§ll till kust ‚Äì men hans hj√§rta sl√•r fortfarande f√∂r √ñstersund!\n" +
                              $"{name} √§r inte bara en skicklig spelare; han har √§ven en imponerande bakgrund som l√§rare, f√∂rfattare och mjukvaruutvecklare.\n" +
                              "Med sin passion f√∂r programmering och databaser utbildar han b√•de elever och andra l√§rare och har skrivit skolb√∂cker inom datorprogrammering.\n" +
                              "Men det slutar inte d√§r! Krister √§r ocks√• en f√∂respr√•kare f√∂r mental h√§lsa och v√§lbefinnande genom sin undervisning i meditation och arrangemang av tysta retreater.\n" +
                              $"Som spelare √§r {name} kreativ och innovativ, alltid redo att samarbeta i team och utveckla nya id√©er.\n" +
                              "Hans k√§rlek till sk√∂nlitteratur ger honom ett unikt perspektiv p√• spelet, vilket g√∂r varje match √§nnu mer sp√§nnande.\n" +
                              $"L√•t oss ge ett stort varmt v√§lkomnande till {name}!");
        }
        else if (name.ToLower().Contains("jonathan"))
        {
            Console.WriteLine($"{name} ‚Äì en riktig stj√§rna fr√•n Bor√•s! \n" +
                              $"{name} √§r inte bara en stolt bor√•sare, han √§r ocks√• en m√§stare i frisbeegolf! \n" +
                              "Med en frisbee i handen och ett leende p√• l√§pparna tar han sig an banorna som en riktig proffs.\n" +
                              "Efter en l√•ng dag p√• banan √§r det dags f√∂r en festm√•ltid... av proteinpannkakor! \n" +
                              "Kanske hoppas han att om han √§ter tillr√§ckligt m√•nga, kommer de att f√∂rvandlas till hamburgare i hans dr√∂mmar? \n" +
                              $"{name} √§r √§ven en h√§ngiven supporter av FC Barcelona.\n" +
                              "Han har mer √§n en g√•ng skrikit av gl√§dje n√§r de g√∂r m√•l ‚Äì allt medan han planerar sin n√§sta pannkaksfest!\n" +
                              $"S√•, l√•t oss ge ett stort och varmt v√§lkomnande till {name}!");
        }
        else
        {
            Console.WriteLine($"L√•t oss v√§lkomna {name}! \n\n" +
                              $"{name} √§r m√§staren p√• att svara \"jag vet inte\" i spelet ‚Äì men oroa er inte, hen har en f√∂rm√•ga att gissa r√§tt p√• f√∂rsta f√∂rs√∂ket! \n\n" +
                              $"N√§r {name} inte spelar Jeopardy, kan du hitta hen med en stor kopp kaffe och en √§nnu st√∂rre dr√∂m om att vinna p√• lotteri.\n\n" +
                              $"Ge ett varmt v√§lkomnande till {name}!");
        }
    }

    //spelregler
    static void PresentGameRules()
    {
        Console.Clear();
        Console.WriteLine("\nRegler:");
        Console.WriteLine("F√∂r att f√• svara, tryck p√• din knapp s√• snabbt du kan:");
        Console.WriteLine("Spelare 1 anv√§nder tangenten 'A'.");
        Console.WriteLine("Spelare 2 anv√§nder tangenten 'L'.");
        Console.WriteLine("Ni har 7 sekunder p√• er att svara.");
        Console.WriteLine("Vid r√§tt svar f√•r ni forts√§tta v√§lja kategori, vid fel f√•r den som senast hade r√§tt forts√§tta.");
        Console.WriteLine("Spelare 1 f√•r b√∂rja spelet.");
        Console.WriteLine("Tryck p√• Enter f√∂r att b√∂rja spelet!");
        Console.ReadKey();
        Console.Clear();
    }


     // spelkategorierna   
    static void PresentCategories()
    {
        Console.OutputEncoding = Encoding.UTF8;
        Console.WriteLine("+-------------------------------------------------------------------------------------------------------------+");
        Console.WriteLine("|                                   H√§r √§r dagens kategorier                                                 |");
        Console.WriteLine("+--------------------------+--------------------------+--------------------------+--------------------------+");
        Console.WriteLine("|      1. K√§nda Citat      |   2. FILMTITLAR I EMOJI üé¨ |     3. GISSA LJUDET üîä   |  4. SANT ELLER FALSKT    |");
        Console.WriteLine("+--------------------------+--------------------------+--------------------------+--------------------------+");

        Console.WriteLine($"|{DisplayPoints(cat1_100).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat2_100).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat3_100).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat4_100).PadLeft(11).PadRight(26)}|");

        Console.WriteLine($"|{DisplayPoints(cat1_200).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat2_200).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat3_200).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat4_200).PadLeft(11).PadRight(26)}|");

        Console.WriteLine($"|{DisplayPoints(cat1_300).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat2_300).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat3_300).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat4_300).PadLeft(11).PadRight(26)}|");

        Console.WriteLine($"|{DisplayPoints(cat1_400).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat2_400).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat3_400).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat4_400).PadLeft(11).PadRight(26)}|");

        Console.WriteLine($"|{DisplayPoints(cat1_500).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat2_500).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat3_500).PadLeft(11).PadRight(26)}|" +
                          $"{DisplayPoints(cat4_500).PadLeft(11).PadRight(26)}|");

        Console.WriteLine("+--------------------------+--------------------------+--------------------------+--------------------------+");
    }

    static string DisplayPoints(int points)
    {
        return points > 0 ? points.ToString() : " ";
    }

    static bool AllQuestionsAnswered()
    {
    return cat1_100 == 0 && cat1_200 == 0 && cat1_300 == 0 && cat1_400 == 0 && cat1_500 == 0 &&
           cat2_100 == 0 && cat2_200 == 0 && cat2_300 == 0 && cat2_400 == 0 && cat2_500 == 0 &&
           cat3_100 == 0 && cat3_200 == 0 && cat3_300 == 0 && cat3_400 == 0 && cat3_500 == 0 &&
           cat4_100 == 0 && cat4_200 == 0 && cat4_300 == 0 && cat4_400 == 0 && cat4_500 == 0;
    }

    // k√∂rning huvudspel
    static void PlayGame(Player player1, Player player2)
    {
    Player currentPlayer = player1;

    while (true)
    {
        // Kontrollera om alla fr√•gor √§r slut loop
        if (AllQuestionsAnswered())
        {
            Console.Clear();
            Console.WriteLine("Spelet √§r slut! Dags f√∂r finalfr√•gan!");
            PlayFinal(player1, player2);
            return; // Avsluta spelet efter finalen
        }

        Console.Clear();
        DisplayPlayerScores(player1, player2);
        PresentCategories();

        Console.WriteLine($"{currentPlayer.Name}, v√§lj en kategori (1-4) och tryck Enter:");
        int categoryChoice = ReadCategoryChoice();

        Console.WriteLine("V√§lj po√§ng (100, 200, 300, 400, 500):");
        int pointsChoice = ReadPointsChoice();

        int selectedPoints = GetPointsForCategory(categoryChoice, pointsChoice);
        if (selectedPoints == 0)
        {
            Console.WriteLine("Den h√§r fr√•gan har redan st√§llts! V√§lj en annan fr√•ga.");
            continue;
        }

        bool correctAnswer = AskQuestion(categoryChoice, pointsChoice, player1, player2, currentPlayer);

        if (correctAnswer)
        {
            Console.WriteLine($"{currentPlayer.Name} svarade r√§tt och f√•r v√§lja igen!");
        }
        else
        {
            currentPlayer = currentPlayer == player1 ? player2 : player1;
        }

            Console.Clear();
            DisplayPlayerScores(player1, player2);
        }
    }

    static void DisplayPlayerScores(Player player1, Player player2)
    {
        Console.WriteLine("**************************************");
        Console.WriteLine($"Spelare 1: {player1.Name} | Po√§ng: {player1.Score}");
        Console.WriteLine($"Spelare 2: {player2.Name} | Po√§ng: {player2.Score}");
        Console.WriteLine("**************************************\n");
    }

    static int ReadCategoryChoice()
    {
        int choice;
        while (!int.TryParse(Console.ReadLine(), out choice) || choice < 1 || choice > 4)
        {
            Console.WriteLine("V√§nligen ange ett giltigt kategori nummer (1-4):");
        }
        return choice;
    }

    static int ReadPointsChoice()
    {
        int choice;
        while (!int.TryParse(Console.ReadLine(), out choice) || (choice != 100 && choice != 200 && choice != 300 && choice != 400 && choice != 500))
        {
            Console.WriteLine("V√§nligen ange ett giltigt po√§ng (100, 200, 300, 400, 500):");
        }
        return choice;
    }

    static int GetPointsForCategory(int category, int points)
    {
        return category switch
        {
            1 => points switch { 100 => cat1_100, 200 => cat1_200, 300 => cat1_300, 400 => cat1_400, 500 => cat1_500, _ => 0 },
            2 => points switch { 100 => cat2_100, 200 => cat2_200, 300 => cat2_300, 400 => cat2_400, 500 => cat2_500, _ => 0 },
            3 => points switch { 100 => cat3_100, 200 => cat3_200, 300 => cat3_300, 400 => cat3_400, 500 => cat3_500, _ => 0 },
            4 => points switch { 100 => cat4_100, 200 => cat4_200, 300 => cat4_300, 400 => cat4_400, 500 => cat4_500, _ => 0 },
            _ => 0
        };
    }

    static bool AskQuestion(int category, int points, Player player1, Player player2, Player currentPlayer)
    {
        string question = "";
        string answer = "";
        string explanation = "";

        switch (category)
        {
            case 1:
                switch (points)
                {
                    case 100:
                        question = "To be or not to be, that is the question.";
                        answer = "William Shakespeare";
                        explanation = "Denna ber√∂mda rad √§r fr√•n William Shakespeares pj√§s 'Hamlet'.";
                        cat1_100 = 0;
                        break;
                    case 200:
                        question = "May the Force be with you.";
                        answer = "Star Wars";
                        explanation = "Denna fras √§r ikonisk f√∂r 'Star Wars'.";
                        cat1_200 = 0;
                        break;
                    case 300:
                        question = "I have a dream";
                        answer = "Martin Luther King";
                        explanation = "Martin Luther King Jr. sa detta i sitt k√§nda tal.";
                        cat1_300 = 0;
                        break;
                    case 400:
                        question = "Det b√§sta med att vara barn √§r att man f√•r lov att dr√∂mma.";
                        answer = "Astrid Lindgren";
                        explanation = "Astrid Lindgren √§r k√§nd f√∂r barns √§ventyr.";
                        cat1_400 = 0;
                        break;
                    case 500:
                        question = "En liten gnista kan s√§tta eld p√• ett stort hav.";
                        answer = "Alfred Nobel";
                        explanation = "Alfred Nobel uttryckte ofta filosofiska tankar.";
                        cat1_500 = 0;
                        break;
                }
                break;

            case 2:
                switch (points)
                {
                    case 100:
                        question = "üë®‚Äç‚ù§Ô∏è‚Äçüë®üö¢üíî";
                        answer = "Titanic";
                        explanation = "Denna emoji kombinerar det tragiska Titanic.";
                        cat2_100 = 0;
                        break;
                    case 200:
                        question = "ü¶Åüëë";
                        answer = "Lejonkungen";
                        explanation = "Symbolerna refererar till Lejonkungen.";
                        cat2_200 = 0;
                        break;
                    case 300:
                        question = "üêç‚ö°";
                        answer = "Harry Potter";
                        explanation = "Blixten och ormen representerar Harry Potter.";
                        cat2_300 = 0;
                        break;
                    case 400:
                        question = "üßô‚Äç‚ôÇÔ∏èüíç";
                        answer = "Sagan om ringen";
                        explanation = "Gandalf och Ringen fr√•n 'Sagan om ringen'.";
                        cat2_400 = 0;
                        break;
                    case 500:
                        question = "üèπüéØ";
                        answer = "Hunger Games";
                        explanation = "Pilar och m√•l i 'Hunger Games'.";
                        cat2_500 = 0;
                        break;
                }
                break;

            case 3:
                switch (points)
                {
                    case 100:
                        question = "Gissa Ljudet";
                        answer = "Super Mario";
                        explanation = "Ljud fr√•n Super Mario.";
                        soundManager.PlaySound("C:\\PROJEKT\\OopProjekt\\sounds\\Super Mario Bros. Theme Song [ ezmp3.cc ]-[AudioTrimmer.com].wav");
                        cat3_100 = 0;
                        break;
                    case 200:
                        question = "Gissa Ljudet";
                        answer = "The Flintstones";
                        explanation = "Ljud fr√•n 'The Flintstones'.";
                        soundManager.PlaySound("C:\\PROJEKT\\OopProjekt\\sounds\\Yabba Dabba Doo with Fred Flintstone! [ ezmp3.cc ]-[AudioTrimmer.com].wav");
                        cat3_200 = 0;
                        break;
                    case 300:
                        question = "Gissa Ljudet";
                        answer = "Psycho";
                        explanation = "Klassiskt ljud fr√•n 'Psycho'.";
                        soundManager.PlaySound("C:\\PROJEKT\\OopProjekt\\sounds\\Psycho Full Violin Screech [ ezmp3.cc ]-[AudioTrimmer.com].wav");
                        cat3_300 = 0;
                        break;
                    case 400:
                        question = "Gissa Ljudet";
                        answer = "Indiana Jones";
                        explanation = "Musik fr√•n Indiana Jones.";
                        soundManager.PlaySound("C:\\PROJEKT\\OopProjekt\\sounds\\Indiana Jones Theme Song [HD] [ ezmp3.cc ]-[AudioTrimmer.com].wav");
                        cat3_400 = 0;
                        break;
                    case 500:
                        question = "Gissa Ljudet";
                        answer = "Hesa Fredrik";
                        explanation = "Ljud fr√•n Hesa Fredrik.";
                        soundManager.PlaySound("C:\\PROJEKT\\OopProjekt\\sounds\\Hesa fredrik.wav");
                        cat3_500 = 0;
                        break;
                }
                break;

            case 4:
                switch (points)
                {
                    case 100:
                        question = "Sant eller falskt: M√§nniskor nyser snabbare √§n en geopard kan springa.";
                        answer = "Sant";
                        explanation = "Nysningar kan komma upp i 160 km/h.";
                        cat4_100 = 0;
                        break;
                    case 200:
                        question = "Sant eller falskt: Du br√§nner fler kalorier av att skratta √§n av l√∂pband.";
                        answer = "Falskt";
                        explanation = "L√∂pband √§r effektivare f√∂r kalorif√∂rbr√§nning.";
                        cat4_200 = 0;
                        break;
                    case 300:
                        question = "Sant eller falskt: Det √§r om√∂jligt att slicka sin egen armb√•ge.";
                        answer = "Falskt";
                        explanation = "Det √§r sv√•rt, men vissa kan.";
                        cat4_300 = 0;
                        break;
                    case 400:
                        question = "Sant eller falskt: Bananskal √§r halare √§n is.";
                        answer = "Sant";
                        explanation = "Bananskal √§r extremt hala.";
                        cat4_400 = 0;
                        break;
                    case 500:
                        question = "Sant eller falskt: Det finns en sport d√§r man kastar pannkakor s√• h√∂gt som m√∂jligt.";
                        answer = "Sant";
                        explanation = "Finns som sport under evenemang.";
                        cat4_500 = 0;
                        break;
                }
                break;
        }

        Console.Clear();
        DisplayPlayerScores(player1, player2);
        Console.WriteLine($"Fr√•ga f√∂r {points} po√§ng: {question}");
        Player answeringPlayer = StartTimerWithKeyCheck(7, player1, player2);

        if (answeringPlayer == null)
        {
            Console.WriteLine("Tiden √§r slut! Ingen tryckte p√• knappen i tid.");
        }
        else
        {
            Console.WriteLine($"\n{answeringPlayer.Name}, vad √§r ditt svar?");
            string playerAnswer = Console.ReadLine();

            if (playerAnswer.Equals(answer, StringComparison.OrdinalIgnoreCase))
            {
                answeringPlayer.Score += points;
                Console.WriteLine($"\n{answeringPlayer.Name} svarade r√§tt och f√•r {points} po√§ng!");
            }
            else
            {
                Console.WriteLine($"\n{answeringPlayer.Name} svarade fel.");
            }
        }

        Console.WriteLine($"R√§tt svar: {answer}");
        Console.WriteLine($"F√∂rklaring: {explanation}");
        Console.WriteLine("Tryck p√• valfri tangent f√∂r att forts√§tta...");
        Console.ReadKey();

        return answeringPlayer != null && answeringPlayer.Score > 0;
    }

    static Player StartTimerWithKeyCheck(int seconds, Player player1, Player player2)
    {
        CancellationTokenSource cts = new CancellationTokenSource();
        Player answeringPlayer = null;

        Task timerTask = Task.Run(() =>
        {
            for (int i = seconds; i > 0; i--)
            {
                if (cts.Token.IsCancellationRequested) break;
                Console.WriteLine($"Tid kvar: {i} sekunder");
                Thread.Sleep(1000);
            }
        }, cts.Token);

        Task keyPressTask = Task.Run(() =>
        {
            while (!cts.Token.IsCancellationRequested)
            {
                if (Console.KeyAvailable)
                {
                    ConsoleKey keyPressed = Console.ReadKey(true).Key;
                    if (keyPressed == ConsoleKey.A)
                    {
                        answeringPlayer = player1;
                        cts.Cancel();
                    }
                    else if (keyPressed == ConsoleKey.L)
                    {
                        answeringPlayer = player2;
                        cts.Cancel();
                    }
                }
            }
        });

        Task.WhenAny(timerTask, keyPressTask).Wait();
        return answeringPlayer;
    }


    //FINAlen

    

    static void PlayFinal(Player player1, Player player2)
    {
        Console.Clear();
        Console.WriteLine("Spelet √§r slut! Dags f√∂r finalfr√•gan.");
        Console.WriteLine("\nKategorin √§r: Ov√§ntade Uppfinningar");
        Console.WriteLine("Ni kommer nu f√• satsa era po√§ng p√• sista fr√•gan och ni har 20 sekunder p√• er.\n");

        // Spelare 1 satsar sina po√§ng
        Console.WriteLine($"{player1.Name}, du har {player1.Score} po√§ng.");
        Console.WriteLine("Hur mycket vill du satsa?");
        int player1Bet = ReadBet(player1.Score);

        // Spelare 2 satsar sina po√§ng
        Console.WriteLine($"{player2.Name}, du har {player2.Score} po√§ng.");
        Console.WriteLine("Hur mycket vill du satsa?");
        int player2Bet = ReadBet(player2.Score);

        // Presentera finalfr√•gan
        Console.Clear();
        Console.WriteLine("Finalfr√•gan lyder:");
        Console.WriteLine("Denna ov√§ntade uppfinning, skapad av en svensk ingenj√∂r 1949, f√∂r√§ndrade hur vi arbetar i k√∂ket och gjorde att vi kunde s√§ga adj√∂ till trasslig knytning. Vad √§r det?");
        Console.WriteLine("\nTryck p√• er knapp f√∂r att svara!");

        // Starta timer och f√• spelare som trycker f√∂rst
        Player answeringPlayer = StartTimerWithKeyCheck(20, player1, player2);

        if (answeringPlayer == null)
        {
            Console.WriteLine("Ingen tryckte p√• knappen i tid. Ingen f√•r po√§ng.");
        }
        else
        {
            Console.WriteLine($"\n{answeringPlayer.Name}, vad √§r ditt svar?");
            string playerAnswer = Console.ReadLine();

            string correctAnswer = "Plastp√•skl√§mman";

            if (playerAnswer.Equals(correctAnswer, StringComparison.OrdinalIgnoreCase))
            {
                if (answeringPlayer == player1)
                {
                    player1.Score += player1Bet;
                    Console.WriteLine($"{player1.Name} svarade r√§tt och vinner {player1Bet} po√§ng!");
                }
                else
                {
                    player2.Score += player2Bet;
                    Console.WriteLine($"{player2.Name} svarade r√§tt och vinner {player2Bet} po√§ng!");
                }
            }
            else
            {
                if (answeringPlayer == player1)
                {
                    player1.Score -= player1Bet;
                    Console.WriteLine($"{player1.Name} svarade fel och f√∂rlorar {player1Bet} po√§ng.");
                }
                else
                {
                    player2.Score -= player2Bet;
                    Console.WriteLine($"{player2.Name} svarade fel och f√∂rlorar {player2Bet} po√§ng.");
                }
            }
        }

        // Presentera vinnaren
        Console.Clear();
        Console.WriteLine("Finalen √§r √∂ver! H√§r √§r resultatet:");
        DisplayPlayerScores(player1, player2);

        if (player1.Score > player2.Score)
        {
            Console.WriteLine($"{player1.Name} vinner spelet med {player1.Score} po√§ng! Grattis!");
        }
        else if (player2.Score > player1.Score)
        {
            Console.WriteLine($"{player2.Name} vinner spelet med {player2.Score} po√§ng! Grattis!");
        }
        else
        {
            Console.WriteLine("Spelet slutar oavgjort! Bra k√§mpat b√•da tv√•!");
        }
    }


    //satsningen
    static int ReadBet(int maxBet)
    {
        int bet;
        while (!int.TryParse(Console.ReadLine(), out bet) || bet < 0 || bet > maxBet)
        {
            Console.WriteLine($"Ange en giltig insats mellan 0 och {maxBet}:");
        }
        return bet;
    }


}

